{"version":3,"sources":["webpack:///./src/components/HSCT.js","webpack:///./src/components/school.js"],"names":["HSCT","keys","Object","props","data","handleSelect","name","value","currentItems","state","itemValues","setState","currentHours","hourValues","updateChart","handleValChangeHSCT","e","target","render","class","InputCardSliderOnly","title","onChange","this","CardDeck","_","pick","onSelect","React","Component","School","useState","timeSum","setTimeSum","classes","CSV","pageContext","slice","charToCat","categorizedClasses","i","length","class_","cats","split","j","chartReference","formatChartJSON","chartState","setChartState","chartData","labels","datasets","backgroundColor","options","responsive","maintainAspectRatio","Homework","PersonalTime","Necessities","Classes","HomeworkSum","entries","k","v","parseFloat","tmp","timeSumTmp","toFixed","chartInstance","update","PT","Alert","variant","ref","reference","id","height"],"mappings":"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","file":"component---src-components-school-js-882b24c39364bd8e5682.js","sourcesContent":["import React from 'react'\r\nimport CardDeck from \"../components/CardDeck\";\r\nimport _ from 'lodash'\r\nimport InputCardSliderOnly from './InputCardSliderOnly';\r\n\r\nexport default class HSCT extends React.Component {\r\n\r\n    keys = Object.keys(this.props.data)\r\n\r\n    handleSelect = (name, value) => {\r\n        var currentItems = this.state.itemValues;\r\n        currentItems[name] = value;\r\n        this.setState({itemValues: currentItems})\r\n        var currentHours = this.state.hourValues;\r\n        currentHours[name] = this.props.data[name][value][0];\r\n        this.setState({hourValues: currentHours})\r\n        this.props.updateChart(currentHours, null, null, currentItems)\r\n    }\r\n\r\n    handleValChangeHSCT = (name, e) => {\r\n        var currentHours = this.state.hourValues;\r\n        currentHours[name] = e.target.value;\r\n        this.setState({hourValues: currentHours})\r\n        this.props.updateChart(currentHours, null, null)\r\n      }\r\n\r\n    state = {\r\n        hourValues: {},\r\n        itemValues: {}\r\n    }\r\n\r\n    render(){\r\n        \r\n        /*for (var i = 0; i < this.keys.length; i++){\r\n            if (this.state.hourValues[this.keys[i]] == null) {\r\n                this.state.hourValues[this.keys[i]] = 0\r\n            }\r\n        }*/\r\n\r\n        return (\r\n            <div class=\"container\">\r\n                <div class=\"content-section-heading text-center\">\r\n                    <h2 class=\"text-secondary mb-0\">Homework and Class Time</h2>\r\n                    <h4>Please leave it as \"Choose...\" if you do not have a class in that section. All hours are listed per 7-day week.</h4>\r\n                    <h5>Hours are teacher reported and averaged. You cannot select a lower amount than the average.</h5>\r\n                    <InputCardSliderOnly \r\n                        title={\"Hours per week in school\"} \r\n                        data={[0, 60]} \r\n                        onChange={this.handleValChangeHSCT} \r\n                        value={this.state.hourValues[\"Hours per week in school\"]} \r\n                    />\r\n                    <CardDeck \r\n                        data={_.pick(this.props.data, [\"History\", \"English\", \"Math\"])}\r\n                        onChange={this.handleValChangeHSCT}\r\n                        hourValues={this.state.hourValues}\r\n                        onSelect={this.handleSelect}\r\n                        itemValues={this.state.itemValues}\r\n                    />\r\n                    <CardDeck \r\n                        data={_.pick(this.props.data, [\"Science\", \"Foreign Language\", \"Visual and Performing arts\"])}\r\n                        onChange={this.handleValChangeHSCT}\r\n                        hourValues={this.state.hourValues}\r\n                        onSelect={this.handleSelect}\r\n                        itemValues={this.state.itemValues}\r\n                    />\r\n                    <CardDeck \r\n                        data={_.pick(this.props.data, [\"College Prep Elective\", \"Extra Class 1\", \"Extra Class 2\"])}\r\n                        onChange={this.handleValChangeHSCT}\r\n                        hourValues={this.state.hourValues}\r\n                        onSelect={this.handleSelect}\r\n                        itemValues={this.state.itemValues}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport * as CSV from 'csv-string';\r\nimport HSCT from \"./HSCT\";\r\nimport PT from \"./PT\"\r\nimport Necessities from \"./Necessities\"\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nexport default function School(data) {\r\n\r\n  const [timeSum, setTimeSum] = useState(0)\r\n\r\n  //Parse CSV into classes\r\n  let classes = CSV.parse(data.pageContext.data)\r\n  classes = classes.slice(1)\r\n\r\n  const charToCat = {\r\n    'a' : 'History',\r\n    'b' : 'English',\r\n    'c' : 'Math',\r\n    'd' : 'Science',\r\n    'e' : 'Foreign Language',\r\n    'f' : 'Visual and Performing arts',\r\n    'g' : 'College Prep Elective',\r\n    'o' : 'Extra Class 1',\r\n    'o2' : 'Extra Class 2'\r\n  }\r\n\r\n  let categorizedClasses = {\r\n    \"History\": {},\r\n    \"English\": {},\r\n    \"Math\": {},\r\n    \"Science\": {},\r\n    \"Foreign Language\": {},\r\n    \"Visual and Performing arts\": {},\r\n    \"College Prep Elective\": {},\r\n    \"Extra Class 1\": {},\r\n    'Extra Class 2': {}\r\n  }\r\n  \r\n  for (var i = 0; i < classes.length; i++) { \r\n    let class_ = classes[i]\r\n    let cats = class_[3].split('')\r\n    for (var j = 0; j < cats.length; j++) {\r\n      categorizedClasses[charToCat[cats[j]]][class_[0]] = [class_[1],class_[2]]\r\n      categorizedClasses[charToCat['o']][class_[0]] = [class_[1],class_[2]]\r\n      categorizedClasses[charToCat['o2']][class_[0]] = [class_[1],class_[2]]\r\n    }\r\n  } \r\n    \r\n  //Handle Charting\r\n\r\n  var chartReference = {}; // Used to force chart update\r\n  \r\n  const [chartState, setChartState] = useState(formatChartJSON([0,63,0,0,0,0,0,0,0,0,119])); //Set initial chart conditions\r\n\r\n  function formatChartJSON(chartData){\r\n    return {\r\n      labels: [\r\n        'Homework',\r\n        'Sleep',\r\n        'School Hours',\r\n        'Job',\r\n        'Family Time',\r\n        'Sports and Clubs',\r\n        'Play Time',\r\n        'Down Time',\r\n        'Other Necessities',\r\n        'Other Personal Time',\r\n        'Time Not Used'\r\n      ],\r\n      datasets: [{\r\n        data: chartData,\r\n        backgroundColor: [\r\n          \"#3188b9\",\r\n          \"#690f77\",\r\n          \"#cd382e\",\r\n          \"#fca476\",\r\n          \"#87d9c0\",\r\n          \"#ba67fa\",\r\n          \"#3d782f\",\r\n          \"#4DB6AC\",\r\n          \"#677dde\",\r\n          \"#faf172\"\r\n        ]\r\n      }],\r\n      options: {\r\n        responsive: false,\r\n        maintainAspectRatio: true\r\n      }\r\n    }\r\n  }\r\n\r\n  let Homework_ = {};\r\n  let PersonalTime_ = {};\r\n  let Necessities_ = {};\r\n  let Classes_ = {};\r\n\r\n  function updateChart(Homework, PersonalTime, Necessities, Classes){\r\n    Homework_ = Homework;\r\n    PersonalTime_ = PersonalTime;\r\n    Necessities_ = Necessities;\r\n    Classes_ = Classes;\r\n\r\n    let chartData = chartState.datasets[0].data\r\n    \r\n    //Update Homework Hours and School Hours\r\n    if(Homework != null){\r\n      let HomeworkSum = 0\r\n      for (let [k, v] of Object.entries(Homework)) {\r\n        if(k != 'Hours per week in school'){\r\n          HomeworkSum = HomeworkSum + parseFloat(v)\r\n        }else{\r\n          chartData[2] = parseFloat(v)\r\n        }\r\n      }\r\n\r\n      chartData[0] = HomeworkSum\r\n    }\r\n    \r\n    //Update Sleep Hours\r\n    if(Necessities != null){\r\n      if(Necessities['Sleep'] != null){\r\n        chartData[1] = parseFloat(Necessities['Sleep'])\r\n      }\r\n    }\r\n\r\n    //Update Job Hours\r\n    if(PersonalTime != null){\r\n      if(PersonalTime['Job'] != null){\r\n        chartData[3] = parseFloat(PersonalTime['Job'])\r\n      }\r\n    }\r\n\r\n    //Update Family Time Hours\r\n    if(Necessities != null){\r\n      if(Necessities['Family Time'] != null){\r\n        chartData[4] = parseFloat(Necessities['Family Time'])\r\n      }\r\n    }\r\n    \r\n    //Update Sports and Clubs\r\n    if(PersonalTime != null){\r\n      let tmp = 0\r\n\r\n      if(PersonalTime['Athletics'] != null){\r\n        tmp += parseFloat(PersonalTime['Athletics'])\r\n      }\r\n\r\n      if(PersonalTime['School Clubs'] != null){\r\n        tmp += parseFloat(PersonalTime['School Clubs'])\r\n      }\r\n\r\n      chartData[5] = tmp\r\n    }\r\n\r\n    //Update Play Time Hours\r\n    if(Necessities != null){\r\n      if(Necessities['Play Time'] != null){\r\n        chartData[6] = parseFloat(Necessities['Play Time'])\r\n      }\r\n    }\r\n\r\n    //Update Down Time Hours\r\n    if(Necessities != null){\r\n      if(Necessities['Down Time'] != null){\r\n        chartData[7] = parseFloat(Necessities['Down Time'])\r\n      }\r\n    }\r\n\r\n    //Update Other Necessities\r\n    if (Necessities != null){\r\n      var tmp = 0\r\n\r\n      if(Necessities['Necessities'] != null){\r\n        tmp += parseFloat(Necessities['Necessities'])\r\n      }\r\n      \r\n      if(Necessities['Other'] != null){\r\n        tmp += parseFloat(Necessities['Other'])\r\n      }        \r\n\r\n      chartData[8] = tmp\r\n    }\r\n\r\n    //Update Other Personal Time\r\n    if (PersonalTime != null){\r\n      var tmp = 0\r\n\r\n      if(PersonalTime['Religious Activities'] != null){\r\n        tmp += parseFloat(PersonalTime['Religious Activities'])\r\n      }\r\n\r\n      if(PersonalTime['Community Service'] != null){\r\n        tmp += parseFloat(PersonalTime['Community Service'])\r\n      }\r\n      \r\n      if(PersonalTime['Other'] != null){\r\n        tmp += parseFloat(PersonalTime['Other'])\r\n      }        \r\n\r\n      chartData[9] = tmp\r\n    }\r\n\r\n    //Update Time Left Over\r\n    let timeSumTmp = 0\r\n    for(var i = 0; i < chartData.length - 1; i++){\r\n      timeSumTmp = timeSumTmp + chartData[i]\r\n    }\r\n    setTimeSum(timeSumTmp)\r\n\r\n    if(168 - timeSumTmp > 0){\r\n      chartData[10] = 168 - timeSumTmp\r\n    }else{\r\n      chartData[10] = 0\r\n    }\r\n    \r\n\r\n    //Fix float precision errors\r\n    for(var i = 0; i < chartData.length; i++){\r\n      chartData[i] = parseFloat(chartData[i].toFixed(2))\r\n    }\r\n     \r\n    setChartState(formatChartJSON(chartData))\r\n\r\n    let d = chartReference.chartInstance\r\n    d.update();\r\n  }\r\n\r\n  let chartHeight = 175\r\n\r\n  return (\r\n    <div>\r\n      {/* Homework / Study / Class Time */}\r\n      <HSCT data = {categorizedClasses} updateChart = {updateChart}/>\r\n\r\n      {/* Personal Time */}\r\n      <PT updateChart = {updateChart}/>\r\n\r\n      <Necessities updateChart = {updateChart}/>\r\n\r\n      <div class = \"container\">\r\n        {timeSum-168 > 0 && <Alert variant={\"danger\"}>You are {timeSum-168} hours over the limit! There are only 168 hours in a week</Alert>}\r\n        <Doughnut ref={(reference) => chartReference = reference } id = 'mainChart' data={chartState} height={chartHeight}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}   "],"sourceRoot":""}