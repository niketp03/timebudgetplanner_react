{"version":3,"sources":["webpack:///./src/components/HSCTGeneric.js","webpack:///./src/pages/school-gen.js"],"names":["HSCTGeneric","handleValChangeHSCT","name","e","currentHours","state","hourValues","target","value","setState","props","updateChart","render","class","InputCardSliderOnly","title","data","onChange","this","CardDeck","sliderOnly","React","Component","SchoolGen","useState","timeSum","setTimeSum","chartReference","formatChartJSON","chartState","setChartState","chartData","labels","datasets","backgroundColor","options","responsive","maintainAspectRatio","Homework","PersonalTime","Necessities","Classes","HomeworkSum","Object","entries","k","v","parseFloat","tmp","timeSumTmp","i","length","toFixed","chartInstance","update","PT","Alert","variant","ref","reference","id","height"],"mappings":"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","file":"component---src-pages-school-gen-js-54b2c2a3f5abcea1ea1a.js","sourcesContent":["import React from 'react'\r\nimport CardDeck from \"../components/CardDeck\";\r\nimport _ from 'lodash'\r\nimport InputCardSliderOnly from './InputCardSliderOnly';\r\n\r\nexport default class HSCTGeneric extends React.Component {\r\n\r\n    handleValChangeHSCT = (name, e) => {\r\n        var currentHours = this.state.hourValues;\r\n        currentHours[name] = e.target.value;\r\n        this.setState({hourValues: currentHours})\r\n        this.props.updateChart(currentHours, null, null)\r\n      }\r\n\r\n    state = {\r\n        hourValues: {}\r\n    }\r\n\r\n    render(){\r\n        \r\n        /*for (var i = 0; i < this.keys.length; i++){\r\n            if (this.state.hourValues[this.keys[i]] == null) {\r\n                this.state.hourValues[this.keys[i]] = 0\r\n            }\r\n        }*/\r\n\r\n        return (\r\n            <div class=\"container\">\r\n                <div class=\"content-section-heading text-center\">\r\n                    <h2 class=\"text-secondary mb-0\">Homework and Class Time</h2>\r\n                    <h4>Please leave it as \"Choose...\" if you do not have a class in that section. All hours are listed per 7-day week.</h4>\r\n                    <h5>Hours are teacher reported and averaged. You cannot select a lower amount than the average.</h5>\r\n                    <InputCardSliderOnly \r\n                        title={\"Hours per week in school\"} \r\n                        data={[0, 60]} \r\n                        onChange={this.handleValChangeHSCT} \r\n                        value={this.state.hourValues[\"Hours per week in school\"]} \r\n                    />\r\n                    <CardDeck\r\n                        sliderOnly={true}\r\n                        data = {{\r\n                            \"History\": [0, 16],\r\n                            \"English\": [0, 16],\r\n                            \"Math\": [0, 16]\r\n                        }}\r\n                        onChange={this.handleValChangeHSCT}\r\n                        hourValues={this.state.hourValues}\r\n                    />\r\n                    <CardDeck \r\n                        sliderOnly={true}\r\n                        data = {{\r\n                            \"Science\": [0, 16],\r\n                            \"Foreign Language\": [0, 16],\r\n                            \"Visual and Performing arts\": [0, 16]\r\n                        }}\r\n                        onChange={this.handleValChangeHSCT}\r\n                        hourValues={this.state.hourValues}\r\n                    />\r\n                    <CardDeck \r\n                        sliderOnly={true}\r\n                        data = {{\r\n                            \"College Prep Elective\": [0, 16],\r\n                            \"Extra Class 1\": [0, 16],\r\n                            \"Extra Class 2\": [0, 16]\r\n                        }}\r\n                        onChange={this.handleValChangeHSCT}\r\n                        hourValues={this.state.hourValues}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport * as CSV from 'csv-string';\r\nimport HSCTGeneric from \"../components/HSCTGeneric\";\r\nimport PT from \"../components/PT\"\r\nimport Necessities from \"../components/Necessities\"\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nexport default function SchoolGen() {\r\n\r\n  const [timeSum, setTimeSum] = useState(0)\r\n    \r\n  //Handle Charting\r\n\r\n  var chartReference = {}; // Used to force chart update\r\n  \r\n  const [chartState, setChartState] = useState(formatChartJSON([0,63,0,0,0,0,0,0,0,0,119])); //Set initial chart conditions\r\n\r\n  function formatChartJSON(chartData){\r\n    return {\r\n      labels: [\r\n        'Homework',\r\n        'Sleep',\r\n        'School Hours',\r\n        'Job',\r\n        'Family Time',\r\n        'Sports and Clubs',\r\n        'Play Time',\r\n        'Down Time',\r\n        'Other Necessities',\r\n        'Other Personal Time',\r\n        'Time Not Used'\r\n      ],\r\n      datasets: [{\r\n        data: chartData,\r\n        backgroundColor: [\r\n          \"#3188b9\",\r\n          \"#690f77\",\r\n          \"#cd382e\",\r\n          \"#fca476\",\r\n          \"#87d9c0\",\r\n          \"#ba67fa\",\r\n          \"#3d782f\",\r\n          \"#4DB6AC\",\r\n          \"#677dde\",\r\n          \"#faf172\"\r\n        ]\r\n      }],\r\n      options: {\r\n        responsive: false,\r\n        maintainAspectRatio: true\r\n      }\r\n    }\r\n  }\r\n\r\n  let Homework_ = {};\r\n  let PersonalTime_ = {};\r\n  let Necessities_ = {};\r\n  let Classes_ = {};\r\n\r\n  function updateChart(Homework, PersonalTime, Necessities, Classes){\r\n    Homework_ = Homework;\r\n    PersonalTime_ = PersonalTime;\r\n    Necessities_ = Necessities;\r\n    Classes_ = Classes;\r\n\r\n    let chartData = chartState.datasets[0].data\r\n    \r\n    //Update Homework Hours and School Hours\r\n    if(Homework != null){\r\n      let HomeworkSum = 0\r\n      for (let [k, v] of Object.entries(Homework)) {\r\n        if(k != 'Hours per week in school'){\r\n          HomeworkSum = HomeworkSum + parseFloat(v)\r\n        }else{\r\n          chartData[2] = parseFloat(v)\r\n        }\r\n      }\r\n\r\n      chartData[0] = HomeworkSum\r\n    }\r\n    \r\n    //Update Sleep Hours\r\n    if(Necessities != null){\r\n      if(Necessities['Sleep'] != null){\r\n        chartData[1] = parseFloat(Necessities['Sleep'])\r\n      }\r\n    }\r\n\r\n    //Update Job Hours\r\n    if(PersonalTime != null){\r\n      if(PersonalTime['Job'] != null){\r\n        chartData[3] = parseFloat(PersonalTime['Job'])\r\n      }\r\n    }\r\n\r\n    //Update Family Time Hours\r\n    if(Necessities != null){\r\n      if(Necessities['Family Time'] != null){\r\n        chartData[4] = parseFloat(Necessities['Family Time'])\r\n      }\r\n    }\r\n    \r\n    //Update Sports and Clubs\r\n    if(PersonalTime != null){\r\n      let tmp = 0\r\n\r\n      if(PersonalTime['Athletics'] != null){\r\n        tmp += parseFloat(PersonalTime['Athletics'])\r\n      }\r\n\r\n      if(PersonalTime['School Clubs'] != null){\r\n        tmp += parseFloat(PersonalTime['School Clubs'])\r\n      }\r\n\r\n      chartData[5] = tmp\r\n    }\r\n\r\n    //Update Play Time Hours\r\n    if(Necessities != null){\r\n      if(Necessities['Play Time'] != null){\r\n        chartData[6] = parseFloat(Necessities['Play Time'])\r\n      }\r\n    }\r\n\r\n    //Update Down Time Hours\r\n    if(Necessities != null){\r\n      if(Necessities['Down Time'] != null){\r\n        chartData[7] = parseFloat(Necessities['Down Time'])\r\n      }\r\n    }\r\n\r\n    //Update Other Necessities\r\n    if (Necessities != null){\r\n      var tmp = 0\r\n\r\n      if(Necessities['Necessities'] != null){\r\n        tmp += parseFloat(Necessities['Necessities'])\r\n      }\r\n      \r\n      if(Necessities['Other'] != null){\r\n        tmp += parseFloat(Necessities['Other'])\r\n      }        \r\n\r\n      chartData[8] = tmp\r\n    }\r\n\r\n    //Update Other Personal Time\r\n    if (PersonalTime != null){\r\n      var tmp = 0\r\n\r\n      if(PersonalTime['Religious Activities'] != null){\r\n        tmp += parseFloat(PersonalTime['Religious Activities'])\r\n      }\r\n\r\n      if(PersonalTime['Community Service'] != null){\r\n        tmp += parseFloat(PersonalTime['Community Service'])\r\n      }\r\n      \r\n      if(PersonalTime['Other'] != null){\r\n        tmp += parseFloat(PersonalTime['Other'])\r\n      }        \r\n\r\n      chartData[9] = tmp\r\n    }\r\n\r\n    //Update Time Left Over\r\n    let timeSumTmp = 0\r\n    for(var i = 0; i < chartData.length - 1; i++){\r\n      timeSumTmp = timeSumTmp + chartData[i]\r\n    }\r\n    setTimeSum(timeSumTmp)\r\n\r\n    if(168 - timeSumTmp > 0){\r\n      chartData[10] = 168 - timeSumTmp\r\n    }else{\r\n      chartData[10] = 0\r\n    }\r\n    \r\n\r\n    //Fix float precision errors\r\n    for(var i = 0; i < chartData.length; i++){\r\n      chartData[i] = parseFloat(chartData[i].toFixed(2))\r\n    }\r\n     \r\n    setChartState(formatChartJSON(chartData))\r\n\r\n    let d = chartReference.chartInstance\r\n    d.update();\r\n  }\r\n\r\n  let chartHeight = 175\r\n\r\n  return (\r\n    <div>\r\n      {/* Homework / Study / Class Time */}\r\n      <HSCTGeneric updateChart = {updateChart}/>\r\n\r\n      {/* Personal Time */}\r\n      <PT updateChart = {updateChart}/>\r\n\r\n      <Necessities updateChart = {updateChart}/>\r\n\r\n      <div class = \"container\">\r\n        {timeSum-168 > 0 && <Alert variant={\"danger\"}>You are {timeSum-168} hours over the limit! There are only 168 hours in a week</Alert>}\r\n        <Doughnut ref={(reference) => chartReference = reference } id = 'mainChart' data={chartState} height={chartHeight}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}   "],"sourceRoot":""}